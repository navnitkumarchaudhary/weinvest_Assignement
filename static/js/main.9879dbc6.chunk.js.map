{"version":3,"sources":["components/LoadingIcon.js","components/childcomponent/QuizQuestion.js","components/childcomponent/QuizCount.js","components/childcomponent/QuizAnsOption.js","components/childcomponent/Quiz.js","components/childcomponent/AnswerItem.js","App.js","api/Api.js","store/action/Action.js","serviceWorker.js","store/reducer/Reducer.js","index.js"],"names":["LoadingIcon","props","className","Question","question","QuestionCount","counter","totalquestion","QuizAnsOption","type","name","checked","answerContent","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","Quiz","key","questionId","QuizCount","questionTotal","QuizQuestion","answerOptions","map","item","index","AnswerItem","questionno","answertype","toString","timerId","App","state","questionList","showResult","isLoading","isError","countDownTime","getAnswerlist","alloptions","incorrect_answers","correct_answer","event","setState","currentTarget","console","log","checkGivenAnswertype","onsubmitanswer","getIndexOfSelectedOption","checkNextQestionCondition","selectedoption","i","length","clearInterval","setTimeout","setNextQuestion","calculateCountDownTimer","setInterval","countDownTimer","Math","floor","renderQuiz","renderResult","questionansList","answerlistcontent","zero_count","one_count","two_count","three_count","answerIndex","this","axios","get","then","res","data","resp","results","catch","err","error","content","countDownTimecontent","Component","connect","dispatch","option","anstype","savAnswer","Boolean","window","location","hostname","match","initalstate","reducer","action","optionobj","concat","Object","assign","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9879dbc6.chunk.js","sourcesContent":["import React from 'react'\n\nconst LoadingIcon = (props) => (\n    <div className=\"loading-icon-wrapper\">\n        <div className=\"loading-icon\" />\n    </div>\n)\n\nexport default LoadingIcon\n","import React from 'react';\n\nconst Question = props => {\n  return <h2 className=\"question\">{props.question}</h2>;\n}\n\n\nexport default Question;\n","import React from 'react';\n\nconst QuestionCount = props => {\n  return (\n    <div className=\"questionCount\">\n      Question <span>{props.counter}</span> of <span>{props.totalquestion}</span>\n    </div>\n  );\n}\n\n\nexport default QuestionCount;\n","import React from 'react';\n\nconst QuizAnsOption = props => {\n  return (\n    <li className=\"answerOption\">\n      <input\n        type=\"radio\"\n        className=\"radioCustomButton\"\n        name=\"radioGroup\"\n        checked={props.answerContent === props.answer}\n        id={props.answerContent}\n        value={props.answerContent}\n        disabled={props.answer}\n        onChange={props.onAnswerSelected}\n      />\n      <label className=\"radioCustomLabel\" htmlFor={props.answerContent}>\n        {props.answerContent}\n      </label>\n    </li>\n  );\n}\n\nexport default QuizAnsOption;\n","import React from 'react';\nimport QuizQuestion from './QuizQuestion';\nimport QuizCount from './QuizCount';\nimport QuizOption from './QuizAnsOption';\n\nconst Quiz = props => {\n\n  return (\n    <div key={props.questionId}>\n      <QuizCount counter={props.questionId} totalquestion={props.questionTotal} />\n      <QuizQuestion question={props.question} />\n      <ul className=\"answerOptions\">\n        {props.answerOptions.map((item, index) => {\n          return <QuizOption\n            key={index}\n            answerContent={item}\n            answer={props.answer}\n            questionId={props.questionId}\n            onAnswerSelected={props.onAnswerSelected}\n          />\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default Quiz;\n","import React from 'react';\r\n\r\nconst AnswerItem = props => {\r\n    return (\r\n        <tr>\r\n            <td>Q. No. {props.questionno}</td>\r\n            <td>{props.answer}</td>\r\n            <td>{props.answertype.toString()}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default AnswerItem;","import React, { Component } from 'react';\nimport './App.css';\nimport * as Api from './api/Api';\nimport { connect } from 'react-redux';\nimport LoadingIcon from './components/LoadingIcon';\nimport { savAnswer } from './store/action/Action';\nimport Quiz from '../src/components/childcomponent/Quiz';\nimport AnswerItem from '../src/components/childcomponent/AnswerItem';\n\nlet timerId = null;\nclass App extends Component {\n\n  state = {\n    counter: 0,\n    questionId: 1,\n    question: '',\n    answer: '',\n    answerOptions: [],\n    questionList: [],\n    showResult: false,\n    isLoading: false,\n    isError: false,\n    countDownTime: 10\n  };\n\n\n  componentDidMount() {\n\n    this.setState({ isLoading: true })\n\n    Api.getQuestionList().then(resp => {\n      // console.log(resp);\n      this.setState({\n        questionList: resp.results,\n        isLoading: false,\n        isError: false,\n        question: resp.results[0].question,\n        answerOptions: this.getAnswerlist(resp.results[0])\n      })\n      this.calculateCountDownTimer();\n    }).catch(err => {\n      console.error(err);\n      this.setState({\n        questionList: [],\n        isLoading: false,\n        isError: true,\n        question: \"\",\n        answerOptions: []\n      })\n    })\n  }\n\n  // get all Answer options\n  getAnswerlist = (item) => {\n    let alloptions = [];\n    if (item) {\n      alloptions = [...item.incorrect_answers, item.correct_answer];\n    }\n    return alloptions;\n  }\n\n\n  // on selection of any option of any question\n  onAnswerSelected = (event) => {\n\n    this.setState({\n      answer: event.currentTarget.value\n    });\n    // console the submited answer as per requirement\n\n    let { questionList, questionId, counter } = this.state;\n\n    if (event.currentTarget.value) {\n      console.log(\"submitted answer is\", event.currentTarget.value, \"which is\", this.checkGivenAnswertype(questionList[counter], event.currentTarget.value));\n      this.props.onsubmitanswer(questionId, event.currentTarget.value, this.checkGivenAnswertype(questionList[counter], event.currentTarget.value), this.getIndexOfSelectedOption(event.currentTarget.value));\n    }\n\n    this.checkNextQestionCondition();\n  }\n\n\n  // get the index of selected option\n  getIndexOfSelectedOption = (selectedoption) => {\n    let { answerOptions } = this.state;\n    if (answerOptions) {\n      for (let i = 0; i < answerOptions.length; i++) {\n        if (answerOptions[i] === selectedoption) {\n          return i;\n        }\n      }\n    }\n    return 0;\n  }\n  // check that Answer is right or wrong\n  checkGivenAnswertype = (item, selectedoption) => {\n    if (selectedoption === item.correct_answer) {\n      return true;\n    }\n    return false;\n  }\n\n  // check next question condition\n  checkNextQestionCondition = () => {\n    let { questionList, questionId } = this.state;\n    if (questionId < questionList.length) {\n      if (timerId) {\n        clearInterval(timerId);\n      }\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setState({ showResult: true, countDownTime: 0 }), 300);\n    }\n  }\n\n  // set next question after submit the answer\n  setNextQuestion = () => {\n    let { questionList, counter, questionId } = this.state;\n    counter = counter + 1;\n    questionId = questionId + 1;\n    if (questionList && questionList.length >= questionId) {\n      this.setState({\n        counter: counter,\n        questionId: questionId,\n        question: questionList[counter].question,\n        answerOptions: this.getAnswerlist(questionList[counter]),\n        answer: '',\n        countDownTime: 10\n      });\n\n      this.calculateCountDownTimer();\n    }\n  }\n\n\n  // main function to call timer function for each question\n  calculateCountDownTimer = () => {\n    timerId = null;\n    timerId = setInterval(() => this.countDownTimer(), 1000);\n  }\n\n  // call this function after every one sec\n  countDownTimer = () => {\n    // Update the count down every 1 second\n    let { countDownTime } = this.state;\n    let seconds = Math.floor(countDownTime - 1);\n    countDownTime = seconds;\n    if (countDownTime > 0) {\n      this.setState({\n        countDownTime: countDownTime\n      })\n    }\n\n    // If the count down is over, clear the previos timer & call for the next question \n    if (countDownTime <= 0) {\n      clearInterval(timerId);\n      timerId = null;\n      this.checkNextQestionCondition();\n    }\n  }\n\n\n  // setup of quiz question\n  renderQuiz = () => {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={this.state.questionList.length}\n        onAnswerSelected={this.onAnswerSelected}\n      />\n    );\n  }\n\n  // set the result\n  renderResult = () => {\n    let { questionansList } = this.props;\n    let answerlistcontent = null;\n    let zero_count = 0, one_count = 0, two_count = 0, three_count = 0;\n    if (questionansList && questionansList.length > 0) {\n      // loop to check foe all the answer should not be same as mentiones in assignment\n      for (let i = 0; i < questionansList.length; i++) {\n        switch (questionansList[i].answerIndex) {\n          case 0:\n            zero_count += 1;\n            break;\n          case 1:\n            one_count += 1;\n            break;\n          case 2:\n            two_count += 1;\n            break;\n          case 3:\n            three_count += 1;\n            break;\n          default:\n            break;\n        }\n      }\n\n\n      if ((zero_count === questionansList.length || one_count === questionansList.length || two_count === questionansList.length || three_count === questionansList.length) && questionansList.length === this.state.questionList.length) {\n        return answerlistcontent = (<div><h2>Your Score</h2><br></br><h3>Your have submitted same answer to each questions. So this will not be accpetable. </h3></div>)\n      }\n\n      answerlistcontent = (<div><h2>Your Score</h2><table ><tbody>\n        {questionansList.map((item, index) => {\n          return <AnswerItem key={index} questionno={item.id} answer={item.answer} answertype={item.answertype}></AnswerItem>\n        })}\n      </tbody></table></div>)\n    } else {\n      answerlistcontent = (<div><h2>Your Score</h2><br></br><h3>Your have scored 0.</h3></div>)\n    }\n\n    return answerlistcontent;\n  }\n\n\n  render() {\n    let { isLoading, showResult, isError, countDownTime } = this.state;\n    let content = null;\n    let countDownTimecontent = null;\n\n    if (isLoading) {\n      content = <LoadingIcon></LoadingIcon>\n    } else if (isError) {\n      content = (<div><span>Something went wrong. Please check your internet connection.</span></div>)\n    } else {\n      countDownTimecontent = `Timer : ${countDownTime} Sec`\n      content = (<div>{showResult ? this.renderResult() : this.renderQuiz()}</div>)\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div>\n            <span className=\"header\">Trivia Game</span>\n            <span className=\"timer\">{countDownTimecontent}</span>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          {content}\n        </div>\n      </div>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => {\n  let { questionansList } = state;\n\n  return {\n    questionansList\n  }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n\n  return {\n    onsubmitanswer: (questionId, option, anstype, answerIndex) => {\n      dispatch(savAnswer(questionId, option, anstype, answerIndex))\n    }\n  }\n\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","\nimport axios from 'axios';\nconst ApiUrl = \"https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple\"\n\n// to get questionList\nexport const getQuestionList = () =>\n  axios.get(ApiUrl)\n    .then(res => res.data)\n\n\n","const SAVE_QUESTIONS_ANSWER = \"SAVE_QUESTIONS_ANSWER\";\r\n\r\nconst savAnswer = (questionId, option, anstype, answerIndex) => {\r\n    return {\r\n        type: SAVE_QUESTIONS_ANSWER,\r\n        questionId,\r\n        option,\r\n        anstype,\r\n        answerIndex\r\n    }\r\n}\r\n\r\nexport {\r\n    SAVE_QUESTIONS_ANSWER,\r\n    savAnswer\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SAVE_QUESTIONS_ANSWER } from '../action/Action'\r\n\r\nconst initalstate = {\r\n    questionansList: []\r\n}\r\n\r\nconst reducer = (state = initalstate, action) => {\r\n    if (action.type === SAVE_QUESTIONS_ANSWER) {\r\n        let optionobj = {\r\n            id: action.questionId,\r\n            answer: action.option,\r\n            answertype: action.anstype,\r\n            answerIndex: action.answerIndex\r\n        }\r\n        let questionansList = state.questionansList.concat(optionobj);\r\n        return Object.assign({}, state, { questionansList });\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './store/reducer/Reducer';\nlet store = createStore(reducer);\nReactDOM.render(\n  <Provider store={store}> <App /></Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}